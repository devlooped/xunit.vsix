# Builds and runs tests in all three supported OSes
# Pushes CI feed if secrets.SLEET_CONNECTION is provided

name: build
on: 
  workflow_dispatch:
  push:
    branches: [ main, dev, 'feature/*', 'rel/*' ]
    paths-ignore:
      - changelog.md
      - code-of-conduct.md
      - security.md
      - support.md
  pull_request:
    types: [opened, synchronize, reopened]
  release:
    types: [released]

env:
  DOTNET_NOLOGO: true
  Configuration: Release

jobs:
  init:
    runs-on: windows-latest
    steps:
      - name: 🤘 checkout
        uses: actions/checkout@v2

      - name: 🛠 dotnet-vs
        id: vs
        uses: ./.github/actions/dotnet-vs
  
      - name: 📦 vs config cache
        id: vs-cache
        uses: actions/cache@v3
        with:
          key: vs-init-${{ steps.vs.outputs.version }}
          path: ${{ steps.vs.outputs.config }}

      - name: 🛠 init vs
        if: ${{ steps.vs-cache.outputs.cache-hit != 'true' }}
        timeout-minutes: 30
        run: | 
          # Force MEF init
          echo "//" > dummy.cs
          cat dummy.cs

          $original = if (test-path '${{ steps.vs.outputs.config }}\privateregistry.bin') { 
            gci '${{ steps.vs.outputs.config }}\privateregistry.bin' | select -ExpandProperty LastWriteTime 
          } else { 
            get-date
          }

          echo "Running devenv..."
          devenv dummy.cs /NoSplash /ResetSettings General /Command "File.Exit"
          echo "Waiting for devenv to exit..."
          wait-process -name devenv
          
          pushd ${{ steps.vs.outputs.config }}
          while (!(test-path .\privateregistry.bin)) {
            echo "::warning::Waiting for privateregistry.bin to be created..."
            sleep 5
          }
          
          echo "Begin wait for privateregistry.bin to be released..."          
          sleep 5
          
          while ($true) {
            $updated = gci .\privateregistry.bin | select -ExpandProperty LastWriteTime
            $seconds = ([datetime]::now - $updated).TotalSeconds
            echo "::debug::privateregistry.bin modified $seconds seconds ago"
            if ($updated -gt $original -and $seconds -gt 30) {
              echo "File changed at least 30 seconds ago. Exiting."
              return              
            }
            sleep 5
          }

  init-exp:
    runs-on: windows-latest
    steps:
      - name: 🤘 checkout
        uses: actions/checkout@v2

      - name: 🛠 dotnet-vs
        id: vs
        uses: ./.github/actions/dotnet-vs
  
      - name: 📦 vs exp config cache
        id: vs-cache-exp
        uses: actions/cache@v3
        with:
          key: vs-init-exp-${{ steps.vs.outputs.version }}
          path: ${{ steps.vs.outputs.config }}Exp

      - name: 🛠 init vs exp
        if: ${{ steps.vs-cache-exp.outputs.cache-hit != 'true' }}
        timeout-minutes: 30
        run: | 
          # Force MEF init
          echo "//" > dummy.cs
          cat dummy.cs

          $original = if (test-path '${{ steps.vs.outputs.config }}Exp\privateregistry.bin') { 
            gci '${{ steps.vs.outputs.config }}Exp\privateregistry.bin' | select -ExpandProperty LastWriteTime 
          } else { 
            get-date
          }

          echo "Running devenv..."
          devenv dummy.cs /NoSplash /RootSuffix Exp /ResetSettings General /Command "File.Exit"
          echo "Waiting for devenv to exit..."
          wait-process -name devenv
          
          pushd ${{ steps.vs.outputs.config }}Exp
          while (!(test-path .\privateregistry.bin)) {
            echo "::warning::Waiting for privateregistry.bin to be created..."
            sleep 5
          }
          
          echo "Begin wait for privateregistry.bin to be released..."          
          sleep 5
          
          while ($true) {
            $updated = gci .\privateregistry.bin | select -ExpandProperty LastWriteTime
            $seconds = ([datetime]::now - $updated).TotalSeconds
            echo "::debug::privateregistry.bin modified $seconds seconds ago"
            if ($updated -gt $original -and $seconds -gt 30) {
              echo "File changed at least 30 seconds ago. Exiting."
              return              
            }
            sleep 5
          }
          
  build:
    needs: [ init, init-exp ]
    runs-on: windows-latest
    steps:
      - name: 🤘 checkout
        uses: actions/checkout@v2
        with: 
          submodules: recursive
          fetch-depth: 0

      - name: 🛠 dotnet-vs
        id: vs
        uses: ./.github/actions/dotnet-vs

      - name: 🔽 restore vs init
        id: vs-cache
        uses: actions/cache@v3
        with:
          key: vs-init-${{ steps.vs.outputs.version }}
          path: ${{ steps.vs.outputs.config }}

      - name: 🔽 restore vs exp init
        id: vs-cache-exp
        uses: actions/cache@v3
        with:
          key: vs-init-exp-${{ steps.vs.outputs.version }}
          path: ${{ steps.vs.outputs.config }}Exp

      - name: 🛑 cache miss
        if: ${{ steps.vs-cache.outputs.cache-hit != 'true' || steps.vs-cache-exp.outputs.cache-hit != 'true' }}
        run: throw "Cached VS config not found from init job"
          
      - name: ≥ version
        if: github.event_name == 'release'
        shell: bash
        run: echo "Version=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV

      - name: ≥ version label
        shell: bash
        run: echo "VersionLabel=$GITHUB_REF.$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
        
      - name: 🙏 build
        run: msbuild -r -m:1

      - name: 📦 pack
        if: always()
        run: dotnet pack --no-build -m:1
        
      - name: 🧪 test
        timeout-minutes: 10
        uses: ./.github/actions/test

      - name: 📦 artifact
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: dumps-${{ github.run_number }}
          path: |
            ./**/*.dmp
            ./**/*.log

      - name: 🚀 sleet
        env:
          SLEET_CONNECTION: ${{ secrets.SLEET_CONNECTION }}
        if: always() && env.SLEET_CONNECTION != ''
        run: |
          dotnet tool install -g --version 4.0.18 sleet 
          sleet push bin --config none -f --verbose -p "SLEET_FEED_CONTAINER=nuget" -p "SLEET_FEED_CONNECTIONSTRING=${{ secrets.SLEET_CONNECTION }}" -p "SLEET_FEED_TYPE=azure" || echo "No packages found"

      - name: ✓ ensure format
        run: dotnet format --verify-no-changes -v:diag --exclude ~/.nuget

      # Only push CI package to nuget.org for releases
      - name: 🚀 nuget
        if: github.event_name == 'release'
        run: dotnet nuget push bin\*.nupkg -s https://api.nuget.org/v3/index.json -k ${{secrets.NUGET_API_KEY}} --skip-duplicate
